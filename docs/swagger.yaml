components:
  schemas:
    handlers.APIInfo:
      description: General Info about the API, author name, how to contact, etc.
      properties:
        author:
          description: Author name.
          example: Kareem Ebrahim
          type: string
        contact:
          description: How to contact the author.
          example: kareemmahlees@gmail.com
          type: string
        repo:
          description: Git repository name for contributions.
          example: https://github.com/kareemmahlees/meta-x
          type: string
        year:
          description: Year of launch
          example: 2024
          type: integer
      type: object
    models.AddModifyColumnPayload:
      properties:
        column_name:
          type: string
        type:
          type: string
      required:
      - column_name
      - type
      type: object
    models.CreatePgMySqlDBPayload:
      properties:
        name:
          description: Database name.
          example: Users
          type: string
      required:
      - name
      type: object
    models.CreateTablePayload:
      description: Data about the column to create.
      properties:
        column_name:
          description: Name of the column.
          type: string
        default:
          description: Default value of the column.
        nullable:
          description: If the column accepts null values or not.
        type:
          description: Data type of the column.
          type: string
        unique:
          description: Wether to add a unique constraint on the column.
      required:
      - column_name
      - type
      type: object
    models.CreateTableResp:
      description: Table Created Successfully.
      properties:
        created:
          type: string
      type: object
    models.DeleteColumnPayload:
      properties:
        column_name:
          type: string
      required:
      - column_name
      type: object
    models.ErrResp:
      description: Operation Failed. Maybe invalid payload or internal server error.
      properties:
        code:
          description: HTTP code.
          example: 400
          type: integer
        message:
          description: Error cause.
          example: Malformed payload
      type: object
    models.InternalServerError:
      description: Something wrong happened on the server.
      properties:
        code:
          description: HTTP code.
          example: 500
          type: integer
        message:
          description: Error cause.
          example: Something went wrong
      type: object
    models.ListDatabasesResp:
      description: A list of all available databases.
      properties:
        databases:
          example:
          - test
          - prod
          - main
          items:
            type: string
          type: array
          uniqueItems: false
      type: object
    models.ListTablesResp:
      description: List of tables.
      properties:
        tables:
          example:
          - table1
          - table2
          - table3
          items:
            type: string
          type: array
          uniqueItems: false
      type: object
    models.SuccessResp:
      description: Operation Succeeded.
      properties:
        success:
          type: boolean
      type: object
    models.TableColumnInfo:
      description: Info about a table column.
      properties:
        default:
          description: Default value of the column.
          example: "123"
        key:
          description: Constraint name on the column.
          example: PRI
        name:
          description: Name of the column.
          example: email
          type: string
        nullable:
          description: If the column accepts null values or not.
          example: "true"
          type: string
        type:
          description: Data type of the column.
          example: varchar
          type: string
      type: object
externalDocs:
  description: ""
  url: ""
info:
  contact:
    email: kareemmahlees@gmail.com
    name: Kareem Ebrahim
  description: A RESTFull and GraphQL API to supercharge your database
  title: MetaX
  version: 0.1.1
openapi: 3.1.0
paths:
  /:
    get:
      description: Get general info about the API
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/handlers.APIInfo'
          description: OK
      summary: Get API Info
      tags:
      - General
  /database:
    get:
      description: Get all the available databases.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.ListDatabasesResp'
          description: OK
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.InternalServerError'
          description: Internal Server Error
      summary: List Databases
      tags:
      - Database
    post:
      description: |-
        Creates a new database with the specified table schema.

        **NOTE**: SQLite is Unsupported.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/models.CreatePgMySqlDBPayload'
        description: Database Info
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.SuccessResp'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.ErrResp'
          description: Bad Request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.InternalServerError'
          description: Internal Server Error
      summary: Create a new Database
      tags:
      - Database
  /table:
    get:
      description: Get a list of the available tables in the database.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.ListTablesResp'
          description: OK
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.InternalServerError'
          description: Internal Server Error
      summary: List tables.
      tags:
      - Table
  /table/{table_name}:
    post:
      description: Creates a new table with the specified columns.
      parameters:
      - description: Table Name
        in: path
        name: table_name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/models.CreateTablePayload'
              type: array
        description: Table Data
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.CreateTableResp'
          description: Created
      summary: Create a Table.
      tags:
      - Table
  /table/{table_name}/describe:
    get:
      description: Get detailed info about a table's fields.
      parameters:
      - description: Table Name
        in: path
        name: table_name
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/models.TableColumnInfo'
                type: array
          description: OK
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.InternalServerError'
          description: Internal Server Error
      summary: Get table info
      tags:
      - Table
  /table/{tableName}:
    delete:
      parameters:
      - description: table name
        in: path
        name: tableName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.SuccessResp'
          description: OK
      tags:
      - Table
  /table/{tableName}/column/add:
    post:
      description: Add column to table
      parameters:
      - description: table name
        in: path
        name: tableName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/models.AddModifyColumnPayload'
        description: column data
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.SuccessResp'
          description: Created
      tags:
      - Table
  /table/{tableName}/column/delete:
    delete:
      description: Delete/Drop table column
      parameters:
      - description: table name
        in: path
        name: tableName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/models.DeleteColumnPayload'
        description: column name
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.SuccessResp'
          description: OK
      tags:
      - Table
  /table/{tableName}/column/modify:
    put:
      description: Update table column
      parameters:
      - description: table name
        in: path
        name: tableName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/models.AddModifyColumnPayload'
        description: column data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.SuccessResp'
          description: OK
      tags:
      - Table
servers:
- description: Home town of Meta-X
  url: http://localhost:5522
tags:
- description: general info about the API.
  name: General
- description: Database level related operations.
  name: Database
- description: Table Level related operations.
  name: Table
